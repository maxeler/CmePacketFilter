package com.maxeler.packetfilter;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.networking.v1.kernel_types.EthernetRXType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.TimestampFormat;
import com.maxeler.networking.v1.managers.netlib.TimestampSource;


public class FilterManager extends NetworkManager {

	public FilterManager(EngineParameters configuration) {
		super(configuration);

		List<EthernetStream> links = new ArrayList<EthernetStream>();

		links.add(addEthernetStream("ethTop1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethTop2", Max4NetworkConnection.QSFP_TOP_10G_PORT2, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethTop3", Max4NetworkConnection.QSFP_TOP_10G_PORT3, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethTop4", Max4NetworkConnection.QSFP_TOP_10G_PORT4, EthernetChecksumMode.FlagOnEOF));

		links.add(addEthernetStream("ethBot1", Max4NetworkConnection.QSFP_BOT_10G_PORT1, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethBot2", Max4NetworkConnection.QSFP_BOT_10G_PORT2, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethBot3", Max4NetworkConnection.QSFP_BOT_10G_PORT3, EthernetChecksumMode.FlagOnEOF));
//		links.add(addEthernetStream("ethBot4", Max4NetworkConnection.QSFP_BOT_10G_PORT4, EthernetChecksumMode.FlagOnEOF));

		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);


		pushTimestampSource(TimestampSource.HOST_CLOCK);
		DFELink ts = addTimestampStream("ts", TimestampFormat.COUNT, 9);

		EthernetRXType rxLinkType = new EthernetRXType();

		KernelBlock kernel = addKernel(new FilterKernel(makeKernelParameters("filterKernel"), rxLinkType, links.size()));
		kernel.getInput(FilterKernel.INPUT_TIMESTAMP) <== ts;

		int i = 0;
		for (EthernetStream link : links) {
			kernel.getInput(FilterKernel.INPUT + i) <== link.getReceiveStream();
			i++;
		}
	}

	public static void main(String[] args) {
		FilterParams params = new FilterParams(args);
		FilterManager manager = new FilterManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
