package com.maxeler.packetfilter;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.networking.v1.kernel_types.EthernetRXType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;


public class FilterManager extends NetworkManager {

	public FilterManager(EngineParameters configuration) {
		super(configuration);

		EthernetStream ethTop1 = addEthernetStream("ethTop1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, EthernetChecksumMode.FlagOnEOF);

		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		DFELink ethRx = ethTop1.getReceiveStream();

		EthernetRXType rxLinkType = new EthernetRXType();

		KernelBlock kernel = addKernel(new FilterKernel(makeKernelParameters("filterKernel"), rxLinkType));
		kernel.getInput(FilterKernel.INPUT) <== ethRx;
	}

	public static void main(String[] args) {
		FilterParams params = new FilterParams(args);
		FilterManager manager = new FilterManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
