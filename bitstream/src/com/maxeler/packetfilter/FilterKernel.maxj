package com.maxeler.packetfilter;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.networking.v1.framed_kernels.FramedLinkType;

public class FilterKernel extends Kernel {
	public static final String INPUT = "frameIn";
	public static final String OUTPUT = "frameOut";



	FilterKernel(KernelParameters parameters, FramedLinkType rxLinkType, int numLinks) {
		super(parameters);

		flush.disabled();

		for (int i=0; i < numLinks; i++) {
			NonBlockingInput<DFEStruct> input = io.nonBlockingInput(INPUT + i,
					rxLinkType.getDFEStructType(),
					rxLinkType.getDFEStructType().getPositionForField(rxLinkType.getEOF()));

			LinkFilter f = new LinkFilter(this, input, rxLinkType);
		}






//		io.output(OUTPUT, ) <== outputStruct;
	}
}
