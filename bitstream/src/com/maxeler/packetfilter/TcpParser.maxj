package com.maxeler.packetfilter;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.KernelBinaryOp;
import maxpower.kernel.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.packetfilter.FieldUtils.FieldDesc;

public class TcpParser extends KernelLib {

	final int minSeqFieldLength = "|34=n|".length();
	final int maxSeqNumLength = 9;
	final int maxSeqFieldLength = "|34=123456789|".length();
	final String seqFieldHeader = "\00134=";
	final int SOH = 1;
	private final DFEVar gotSeq;
	private final DFEVar theSeqNum;

	protected TcpParser(KernelLib owner, FieldUtils futils, DFEVar isStart, DFEVar valid, DFEVar wordData) {
		super(owner);

		FieldDesc SRC_TCP_PORT = new FieldDesc(dfeUInt(16), 0x22);
		FieldDesc DST_TCP_PORT = new FieldDesc(dfeUInt(16), 0x24);

		DFEVar srcPort = futils.captureField(isStart, wordData, SRC_TCP_PORT);
		DFEVar dstPort = futils.captureField(isStart, wordData, DST_TCP_PORT);

		int payloadByteOffset = 0x36;


		/*
		 * 0 1 2 3 4 5 6 7
		 * 8 = F I X 4 . 2
		 *
		 *
		 */
		DFEVar payload = futils.realign(wordData, payloadByteOffset);
		DFEVar payloadStart = futils.isAtOffset(isStart, payloadByteOffset);


		/*
		 * Search for 34=123456789\0
		 */

		DFEVar superWord = stream.offset(payload, 2) # stream.offset(payload, 1) # payload;

		/*
		 * Find the start string:
		 *
		 * \1 3 4 =
		 *
		 * 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
		 *   \1  3  4  =  n  n  n  n  n \1
		 *                                                      \1  3  4  =  n \1
		 */

		int superWordByteSize = superWord.getType().getTotalBits() / 8;

		List<DFEVar> possibleSeqNums = new ArrayList<DFEVar>();

		DFEVar seqNumSelect = null;

		for (int i=0; i <= superWordByteSize-minSeqFieldLength ; i++) {
			DFEVar foundSeqNum = isSeqNum(superWord, i);

//			debug.simPrintf(valid & foundSeqNum, "Seqnum found in at byte index %d in SuperWord 0x%x\n", i, superWord);
//			dumpWord(valid & foundSeqNum, superWord);

			if (i == 0) seqNumSelect = foundSeqNum;
			else seqNumSelect = foundSeqNum # seqNumSelect;

			DFEVar cleanSeq = extractSeqNum(valid & foundSeqNum, superWord, i);
			possibleSeqNums.add(cleanSeq);
		}

		DFEVar hasSeqNum = seqNumSelect !== 0;


		gotSeq = valid & hasSeqNum & ~(stream.offset(hasSeqNum, -2) | stream.offset(hasSeqNum, -1));



		theSeqNum = Reductions.streamHold(control.oneHotMux(seqNumSelect, possibleSeqNums), gotSeq);
	}

	public void dumpWord(DFEVar now, DFEVar superWord) {
		int len = superWord.getType().getTotalBits() / 8;


		for (int i=len-1; i >= 0; i--) {
			debug.simPrintf(now, "%3d", i);
		}
		debug.simPrintf(now, "\n");

		for (int i=len-1; i >= 0; i--) {
			debug.simPrintf(now, " %02x", superWord.slice(i*8, 8));
		}
		debug.simPrintf(now, "\n");
	}

	public DFEVar isSeqNumFound() {
		return gotSeq;
	}

	public DFEVar getSeqNum() {
		return theSeqNum;
	}

	private DFEVar isSeqNum(DFEVar superWord, int index) {
		List<DFEVar> cmp = new ArrayList<DFEVar>();

		for (int i=0; i < seqFieldHeader.length(); i++) {
			cmp.add(superWord.slice((index + i) * 8, 8) === seqFieldHeader.charAt(i));
		}

		List<DFEVar> isSohList = new ArrayList<DFEVar>();

		int superWordSizeBytes = superWord.getType().getTotalBits() / 8;

		int sliceSize = Math.min(maxSeqFieldLength, superWordSizeBytes - (index + 1));
		for (int i=index+1; i < (index + 1 + sliceSize); i++) {
			DFEVar isSOH = superWord.slice(i * 8, 8) === SOH;
			isSohList.add(isSOH);
		}


		optimization.pushPipeliningFactor(0);
		DFEVar hasEnd =  TreeReduce.reduce(new KernelBinaryOp.Or<DFEVar>(), isSohList);
		DFEVar match = hasEnd & TreeReduce.reduce(new KernelBinaryOp.And<DFEVar>(), cmp);
		optimization.popPipeliningFactor();

		return optimization.pipeline(match);
	}

	private DFEVar extractSeqNum(DFEVar now, DFEVar superWord, int fieldStartIndex) {
		int bitOffset = fieldStartIndex * 8;
		bitOffset += seqFieldHeader.length() * 8;

		int superWordSize = superWord.getType().getTotalBits();

		/*

		 *     | 3 4 = 1 2 |
		 *             b
		 */

		int sliceSize = Math.min(maxSeqNumLength * 8, superWordSize - bitOffset);


		DFEVar theField = superWord.slice(bitOffset, sliceSize);

		List<DFEVar> masks = new ArrayList<DFEVar>();
		int fieldSizeBits = theField.getType().getTotalBits();
		int fieldSizeBytes = fieldSizeBits / 8;


		DFEVar maskSelect = null;

		for (int i=0; i < fieldSizeBytes; i++) {
			DFEVar isEnd = theField.slice(i*8, 8) === SOH;

			int realFieldLength = i;

			Bits mask;

			if (maskSelect == null) maskSelect = isEnd;
			else maskSelect = isEnd # maskSelect;

			if (realFieldLength == 0) mask = Bits.allOnes(fieldSizeBits);
			else mask = Bits.allZeros(fieldSizeBits - (realFieldLength * 8)) # Bits.allOnes(realFieldLength * 8);
			masks.add(constant.var(dfeRawBits(fieldSizeBits), mask));
		}


		DFEVar theMask = control.oneHotMux(maskSelect, masks);

		theField = theField & theMask;


		// Pad up to maxSeqNumLength bytes
		if (sliceSize < maxSeqNumLength*8) {
			theField = constant.var(dfeUInt(maxSeqNumLength*8 - sliceSize), 0) # theField;
		}


		return theField;
	}

}
